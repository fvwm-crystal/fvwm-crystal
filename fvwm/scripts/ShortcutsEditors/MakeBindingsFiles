#!/bin/bash
# MakeBindingsFiles for FVWM-Crystal
#
# Version:	1.0.0
# License: 	GPL 3+
#
# Author:	Dominique Michel <dominique_libre@users.sourceforge.net>
#
# Created:	11/10/2024
# Changed:	11/10/2024
#
# Description:	Make preferences Key or Mouse binding files for FVWM-Crystal

# 1st run: Generate preference files for the key or mouse bindings
# 	from the file list into $FVWM_USERDIR/tmp/<Key|Mouse>BindingsList
# 	and $FVWM_USERDIR/components/bindings if any.
# 	When done, remove the files into $FVWM_USERDIR/components/bindings.
# Usage:
#	MakeBindingsFile <Key|Mouse>

usage() {
	echo "$(basename $0) usage:"
	echo "   $(basename $0) Key|Mouse"
	exit 1
}
if [ x"" == x"$1" ]; then
    usage
fi
if [ $1 != Key ]; then
    if [ $1 != Mouse ]; then
	usage
    fi
fi

# Preferences directoey and file
BindingsPrefDir="${FVWM_USERDIR}/preferences/bindings"
BindingsUserFile="${BindingsPrefDir}/${1}Bindings"
mkdir -p "${BindingsPrefDir}"
# path of temporary generated files
TmpDir="${FVWM_USERDIR}/tmp"
mkdir -p "${TmpDir}"
# default bindings files list; generated by crystal at Start and Restart
BindingsFilesList="${TmpDir}/${1}BindingsList"
# temporary bindings list
BindingsTmpFile="${TmpDir}/${1}Bindings"

# We must know if it is the first run
FRun="0"
if [ -f "${BindingsUserFile}" ]; then
    FRun="0"
else
    FRun="1"
fi

# make a bindings list from the files list
find_bindings() {
    echo -n '' > "${BindingsTmpFile}"
    if [ "${1}" == "Key" ]; then
	echo '# Key binding syntax:' >> "${BindingsTmpFile}"
        echo '#    Key [(window)] Keyname Context Modifiers Function' >> "${BindingsTmpFile}"
	echo '#' >> "${BindingsTmpFile}"
	echo '# Where Keyname is a standard X11 key name as defined in' >> "${BindingsTmpFile}"
	echo '# /usr/include/X11/keysymdef.h, (without the XK_ prefix),' >> "${BindingsTmpFile}"
        echo '# or the keysym database /usr/X11R6/lib/X11/XKeysymDB.' >> "${BindingsTmpFile}"
	echo '#' >> "${BindingsTmpFile}"
	echo '# Modifiers is any combination of N for no modifiers, C for control,' >> "${BindingsTmpFile}"
	echo '#    S for shift, M for Meta, L for Caps-Lock or A for any modifier.' >> "${BindingsTmpFile}"
	echo '# You can see and change the modifiers in Preferences -> Key Binding Modifier Editor.' >> "${BindingsTmpFile}"
	echo '#' >> "${BindingsTmpFile}"
	echo '# See "man fvwm" and the description of the shortcuts in Crystal Help Menu for more.' >> "${BindingsTmpFile}"
	echo "" >> "${BindingsTmpFile}"
    fi

    while read myline; do
	echo "## From ${myline}: {{{1" >> "${BindingsTmpFile}"
	cat "${myline}" | sed -e "s:	*	: :g" -e "s: * : :g" >> "${BindingsTmpFile}"
    done < "${BindingsFilesList}"
}

# get the command string associated to a key binding
#getstringall() {
#    while read myline; do
#	cmds=$(grep -v -e "^#" -e "^$" "${myline}" | sed -e "s:	*	: :g" -e "s: * : :g" -e "s:.*Key:Key:" -e "s:'$::" | cut -d " " -f 5-)
#	echo "${cmds}"
#    done < "${BindingsFilesList}"
#}
getkey() {
    keys=$(echo $1 | grep -i -v -e "^#" -e "^$" | sed -e "s:	*	: :g" -e "s: * : :g" -e "s:.*Key:Key:" -e "s:'$::" | cut -d " " -f 1-4)
#echo K: "${keys}"
}
#getkey

getfunc() {
    funcs=$(echo $1 | grep -i -v -e "^#" -e "^$" | sed -e "s:	*	: :g" -e "s: * : :g" -e "s:.*Key:Key:" -e "s:'$::" | cut -d " " -f 5-)
#echo F: "${funcs}"
}
#getfunc

identicalline() {
    grep -x -F "$1" "$2" 1>/dev/null || echo "$1"
}

findidenticalline() {
    grep -x -F "$1" "$2" 1>/dev/null
}

keyexist() {
    tmpv=$(sed -e 's:\[:\\\[:g' -e 's:\]:\\\]:g' <<<"$1")
    grep "^$tmpv " "$2" 1>/dev/null
}

funcexist() {
    tmpv=$(sed -e 's:\[:\\\[:g' -e 's:\]:\\\]:g' <<<"$1")
    grep " $tmpv$" "$2" 1>/dev/null
}

write_bindingsfile() {
#    echo -n "" > "${BindingsUserFile}"
    # We want only 1 vim line at the end of the file.
    sed -i 's/# vim:ft=fvwm/# New line additions:/' "${BindingsUserFile}"

    while read myline ; do
	# if non empty line
	if [[ -n "${myline}" ]]; then
	    # skip wim lines
	    if [[ "# vim:ft=fvwm" != "${myline}" ]]; then
		case "${myline}" in
		\#*)
		    # copy commented lines as it only if they dont exist
		    identicalline "${myline}" "${BindingsUserFile}" >> "${BindingsUserFile}"
		    ;;
		*)
		    getkey "${myline}"
		    getfunc "${myline}"
		    #  key  | func  | action
		    #-------|-------|--------
		    # true  | true  | line exist - do nothing
		    # true  | false | key exist - copy commentd line
		    # false | true  | key don't exist - copy line
		    # false | false | line don't exist - copy line
		    # TODO: after adding a line, info and ask for editing

		    # true  | true  == identical line exist; do nothing.
		    if ! findidenticalline "${myline}" "${BindingsUserFile}"; then
			echo C:"${funcs}" F:"${keys}" L:"${myline}"
		    	# ! identical && key exist => true false
			if keyexist "${keys}" "${BindingsUserFile}" ; then
			    echo "#${myline}" >> "${BindingsUserFile}"
			    echo "Add commented line with existing key binding and a different function:"
			    echo "    ${myline}"
			else
			    echo "${myline}" >> "${BindingsUserFile}"
			    echo "Add new keybinding: ${myline}"
			fi
		    fi
		    ;;
		esac
	    fi
	else
	    # copy empty lines first time
	    if [[ "${FRun}" == "1" ]]; then
		echo "${myline}" >> "${BindingsUserFile}"
	    fi
	fi
    done < "${BindingsTmpFile}"
    echo "# vim:ft=fvwm" >> "${BindingsUserFile}"
}

# main()
if [ -f "${BindingsTmpFile}" ]; then
    write_bindingsfile "${1}"
else
    if [ -f "${BindingsFilesList}" ]; then
	find_bindings "${1}"
	write_bindingsfile "${1}"
    else
	echo "For $(basename $0) to run, restart FVWM-Crystal."
	rm -f "${BindingsTmpFile}"
	exit 2
    fi
fi

FvwmCommand "AT 'FVWM-Crystal Bindings Editor' ${EDITOR} ${BindingsUserFile}"

# Generation of Fvwmscript
TmpScriptName="${TmpDir}/FvwmScript-${1}Bindings"

#ScriptHeight="$((${panel_font_size} + ((${panel_font_size} / 2))))"
#CharNumber="${#2}"
#ScriptWidth="$((((${panel_font_size} - ((${panel_font_size} / 10)))) * ${CharNumber}))"
#echo ${panel_font_size}

# Header Ì£{{{1
echo 'UseGettext {$FVWM_USERDIR/locale;fvwm-crystal-script:$FVWM_SYSTEMDIR/locale;fvwm-crystal-script:+}' > "${TmpScriptName}"
echo "WindowLocaleTitle {${1}Bindings}" >> "${TmpScriptName}"
echo "WindowSize 900 600" >> "${TmpScriptName}"
#echo "WindowSize "${ScriptWidth}" "${ScriptHeight}"" >> "${TmpScriptName}"
#WindowPosition 300 300
echo "Colorset	1
Font	\"xft:${panel_font}:pixelsize=${panel_font_size}:style=${panel_font_style}\"" >> "${TmpScriptName}"

# Initialisation {{{1
echo "Init
Begin
#    ChangeLocaleTitle 1 {${2}}
End" >> "${TmpScriptName}"

# Periodic Tasks {{{1
#PeriodicTasks
#Begin
#End

# Quit Function {{{1
#QuitFunc
#Begin
#  Do {UnsetEnv FileEditWithHelp}
#  Do {Echo The font: }$SetFont{ is xft:}$FontName{:pixelsize=}$Size{:}$Style
#End

# Main {{{1
echo "Widget 1
Property
#    Flags NoReliefString
    Position 0 0
    Size 900 600" >> "${TmpScriptName}"
#    Size "${ScriptWidth}" "${ScriptHeight}"" >> "${TmpScriptName}"
echo "    Type SwallowExec
    Title {Bindings Editor}
    SwallowExec {AT \"Bindings Editor\" nano ${BindingsUserFile}}
    Flags Left" >> "${TmpScriptName}"
#Main
#Case message of
# SingleClic :
# Begin
# End
#End'

#FvwmCommand "AT 'FVWM-Crystal Bindings Editor' ${EDITOR} ${BindingsUserFile}2"
#FvwmCommand "FvwmScript ${TmpScriptName}"
#sleep 1
#rm "${TmpScriptName}"

# vim:ft=fvwm
